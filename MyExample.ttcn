/******************************************************************************
* MQTTas测试demo
*HelloW0,HelloW1,HelloW2测试用例用于测试发布订阅功能
*HelloW3测试用例用于测试实时功能
*
* Contributors:
*   ChangfengLi
*
******************************************************************************/
module MyExample
{
import from MQTTasp_Types all;
import from MQTTasp_PortType all;

type component MTCType
{
  port MQTTasp_PT MyPCO;
  var charstring device_name;
}

testcase device_test() runs on MTCType system MTCType
{
  timer T := 10.0;
  var float time_send, time_receive;
  var Sub_Message register_name;
  var MQTT_Data pub_register := {omit,omit,"register"};
  map(mtc:MyPCO, system:MyPCO);
  MyPCO.send(pub_register);
  MyPCO.receive(Sub_Message :?) -> value register_name;
  device_name := register_name.data;
  var MQTT_Data pub_inquiry := {"inquiry",device_name & "_inquiry",device_name & "_inquiry_send"};
  var MQTT_Data pub_broadcast := {"open",device_name & "_broadcast",device_name & "_broadcast_send"};
  var MQTT_Data pub_delay := {"delay",device_name&"_delay",device_name & "_delay_send"};
  var MQTT_Data pub_alarm := {"alarm",device_name&"_alarmt",device_name & "_alarm"};
  var MQTT_Data pub_id := {"123456",device_name & "_id",omit};
  var MQTT_Data pub_result := {"SUCCESS",device_name&"_result",omit};
  MyPCO.send(pub_id);
  MyPCO.send(pub_inquiry);
  T.start;
  alt {
    [] MyPCO.receive({device_name&"_inquiry_send","123456"}) { T.stop;}
    [] T.timeout { log("timeout");setverdict(inconc); }
    [] MyPCO.receive { T.stop; setverdict(fail); }
  }
  MyPCO.send(pub_broadcast);
  T.start;
  alt {
    [] MyPCO.receive({device_name&"_broadcast_send","open"}) { T.stop;}
    [] T.timeout { log("timeout");setverdict(inconc); }
    [] MyPCO.receive { T.stop; setverdict(fail); }
  }
  MyPCO.send(pub_alarm);
  T.start;
  alt {
    [] MyPCO.receive({device_name&"_alarm","alarm"}) { T.stop;}
    [] T.timeout { log("timeout");setverdict(inconc); }
    [] MyPCO.receive { T.stop; setverdict(fail); }
  }
  T.start;
  MyPCO.send(pub_delay) -> timestamp time_send;
  alt {
    [] MyPCO.receive({device_name&"_delay_send",?}) -> timestamp time_receive {T.stop;}
    [] T.timeout { log("timeout");setverdict(inconc); }
    [] MyPCO.receive { T.stop; setverdict(fail); }
  }
  log("RTT:",time_receive-time_send,"s");

  if(time_receive-time_send<0.1){
    MyPCO.send(pub_result);
    setverdict(pass);
  }else{
    pub_result := {"FAIL",device_name&"_result",omit};
    MyPCO.send(pub_result);
    setverdict(fail);
  }

  unmap(mtc:MyPCO, system:MyPCO);
}

control
{
    execute(device_test());
    //execute(HelloW1());
  //execute(HelloW2());
  //execute(HelloW3());
}
}
